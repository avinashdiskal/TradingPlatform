import java.util.*;

class Stock {
    String symbol;
    double price;

    Stock(String symbol, double price) {
        this.symbol = symbol;
        this.price = price;
    }
}

class User {
    String name;
    double balance;
    Map<String, Integer> portfolio = new HashMap<>();

    User(String name, double balance) {
        this.name = name;
        this.balance = balance;
    }

    void buyStock(String symbol, int quantity, double price) {
        double cost = quantity * price;
        if (balance >= cost) {
            balance -= cost;
            portfolio.put(symbol, portfolio.getOrDefault(symbol, 0) + quantity);
            System.out.println("Bought " + quantity + " shares of " + symbol);
        } else {
            System.out.println("Insufficient balance.");
        }
    }

    void sellStock(String symbol, int quantity, double price) {
        if (portfolio.containsKey(symbol) && portfolio.get(symbol) >= quantity) {
            portfolio.put(symbol, portfolio.get(symbol) - quantity);
            balance += quantity * price;
            System.out.println("Sold " + quantity + " shares of " + symbol);
        } else {
            System.out.println("Not enough shares to sell.");
        }
    }

    void viewPortfolio(Map<String, Stock> stockMap) {
        System.out.println("\n--- Portfolio ---");
        System.out.println("Cash Balance: $" + balance);
        for (String symbol : portfolio.keySet()) {
            int qty = portfolio.get(symbol);
            double value = qty * stockMap.get(symbol).price;
            System.out.println(symbol + ": " + qty + " shares, Value: $" + value);
        }
    }
}

public class TradingPlatform {
    static Map<String, Stock> market = new HashMap<>();
    static Scanner sc = new Scanner(System.in);
    static User user;

    public static void main(String[] args) {
        initMarket();
        System.out.print("Enter your name: ");
        String name = sc.nextLine();
        user = new User(name, 10000);

        int choice;
        do {
            System.out.println("\n--- Stock Trading Platform ---");
            System.out.println("1. View Market Data");
            System.out.println("2. Buy Stock");
            System.out.println("3. Sell Stock");
            System.out.println("4. View Portfolio");
            System.out.println("5. Exit");
            System.out.print("Enter choice: ");
            choice = sc.nextInt();

            switch (choice) {
                case 1 -> viewMarket();
                case 2 -> buy();
                case 3 -> sell();
                case 4 -> user.viewPortfolio(market);
                case 5 -> System.out.println("Exiting. Goodbye!");
                default -> System.out.println("Invalid choice.");
            }
        } while (choice != 5);
    }

    static void initMarket() {
        market.put("AAPL", new Stock("AAPL", 150));
        market.put("GOOG", new Stock("GOOG", 2800));
        market.put("TSLA", new Stock("TSLA", 750));
        market.put("AMZN", new Stock("AMZN", 3400));
    }

    static void viewMarket() {
        System.out.println("\n--- Market Data ---");
        for (Stock s : market.values()) {
            System.out.println(s.symbol + " - $" + s.price);
        }
    }

    static void buy() {
        sc.nextLine();
        System.out.print("Enter stock symbol to buy: ");
        String symbol = sc.nextLine().toUpperCase();

        if (!market.containsKey(symbol)) {
            System.out.println("Invalid stock.");
            return;
        }

        System.out.print("Enter quantity: ");
        int qty = sc.nextInt();
        user.buyStock(symbol, qty, market.get(symbol).price);
    }

    static void sell() {
        sc.nextLine();
        System.out.print("Enter stock symbol to sell: ");
        String symbol = sc.nextLine().toUpperCase();

        if (!market.containsKey(symbol)) {
            System.out.println("Invalid stock.");
            return;
        }

        System.out.print("Enter quantity: ");
        int qty = sc.nextInt();
        user.sellStock(symbol, qty, market.get(symbol).price);
    }
}
